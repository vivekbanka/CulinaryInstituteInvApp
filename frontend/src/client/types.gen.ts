// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

/**
 * Container for multiple categories
 */
export type ItemCategoriesPublic = {
    data: Array<ItemCategoryPublic>;
    count: number;
};

/**
 * Model for creating a new category
 */
export type ItemCategoryCreate = {
    item_category_name: string;
    item_category_code: string;
    item_category_isactive?: boolean;
};

/**
 * Model for public API responses
 */
export type ItemCategoryPublic = {
    item_category_name: string;
    item_category_code: string;
    item_category_isactive?: boolean;
    item_category_id: string;
    created_at: string;
    updated_at?: (string | null);
    created_by_id: string;
    updated_by_id?: (string | null);
};

/**
 * Model for updating an existing category
 */
export type ItemCategoryUpdate = {
    item_category_code?: (string | null);
    item_category_name?: (string | null);
    item_category_isactive?: (boolean | null);
};

export type ItemCreate = {
    title: string;
    description?: (string | null);
};

export type ItemPublic = {
    title: string;
    description?: (string | null);
    id: string;
    owner_id: string;
};

export type ItemsPublic = {
    data: Array<ItemPublic>;
    count: number;
};

/**
 * Container for multiple subcategories
 */
export type ItemSubCategoriesPublic = {
    data: Array<ItemSubCategoryPublic>;
    count: number;
};

/**
 * Model for creating a new subcategory
 */
export type ItemSubCategoryCreate = {
    item_subcategory_name: string;
    item_subcategory_code: string;
    item_subcategory_isactive?: boolean;
    item_category_id: string;
};

/**
 * Model for public API responses
 */
export type ItemSubCategoryPublic = {
    item_subcategory_name: string;
    item_subcategory_code: string;
    item_subcategory_isactive?: boolean;
    item_category_id: string;
    item_subcategory_id: string;
    created_at: string;
    updated_at?: (string | null);
    created_by_id: string;
    updated_by_id?: (string | null);
};

/**
 * Model for updating an existing subcategory
 */
export type ItemSubCategoryUpdate = {
    item_subcategory_name?: (string | null);
    item_subcategory_code?: (string | null);
    item_subcategory_isactive?: (boolean | null);
    item_category_id?: (string | null);
};

/**
 * Model for public API responses with category details
 */
export type ItemSubCategoryWithCategory = {
    item_subcategory_name: string;
    item_subcategory_code: string;
    item_subcategory_isactive?: boolean;
    item_category_id: string;
    item_subcategory_id: string;
    created_at: string;
    updated_at?: (string | null);
    created_by_id: string;
    updated_by_id?: (string | null);
    category?: (ItemCategoryPublic | null);
};

export type ItemUpdate = {
    title?: (string | null);
    description?: (string | null);
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

/**
 * Create Roles Claims
 */
export type RolesClaimsCreate = {
    role_claim_type: string;
    role_claim_value: string;
    role_claim_isactive?: (boolean | null);
    role_id: string;
};

/**
 * Model for public API Response
 */
export type RolesClaimsPublic = {
    role_claim_type: string;
    role_claim_value: string;
    role_claim_isactive?: (boolean | null);
    role_id: string;
    role_claim_id: string;
    created_at: string;
    updated_at?: (string | null);
    created_by_id: string;
    updated_by_id?: (string | null);
};

export type RolesClaimsUpdate = {
    role_claim_type: string;
    role_claim_value: string;
    role_claim_isactive?: (boolean | null);
    role_id: string;
};

/**
 * Model for creating Roles
 */
export type RolesCreate = {
    role_name: string;
    role_is_active?: boolean;
};

/**
 * Model for the Public API response
 */
export type RolesPublic = {
    role_name: string;
    role_is_active?: boolean;
    role_id: string;
    created_at: string;
    updated_at?: (string | null);
    created_by_id: string;
    updated_by_id?: (string | null);
};

/**
 * Model to update roles information
 */
export type RolesUpdate = {
    role_name: (string | null);
    role_is_active?: (boolean | null);
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type ItemCategoryReadItemCategoriesData = {
    limit?: number;
    search?: string;
    skip?: number;
    sortBy?: string;
    sortOrder?: string;
};

export type ItemCategoryReadItemCategoriesResponse = (ItemCategoriesPublic);

export type ItemCategoryCreateItemCategoryData = {
    requestBody: ItemCategoryCreate;
};

export type ItemCategoryCreateItemCategoryResponse = (ItemCategoryPublic);

export type ItemCategoryUpdateItemCatergoryData = {
    id: string;
    requestBody: ItemCategoryUpdate;
};

export type ItemCategoryUpdateItemCatergoryResponse = (ItemCategoryPublic);

export type ItemCategoryDeleteItemData = {
    id: string;
};

export type ItemCategoryDeleteItemResponse = (Message);

export type ItemsReadItemsData = {
    limit?: number;
    skip?: number;
};

export type ItemsReadItemsResponse = (ItemsPublic);

export type ItemsCreateItemData = {
    requestBody: ItemCreate;
};

export type ItemsCreateItemResponse = (ItemPublic);

export type ItemsReadItemData = {
    id: string;
};

export type ItemsReadItemResponse = (ItemPublic);

export type ItemsUpdateItemData = {
    id: string;
    requestBody: ItemUpdate;
};

export type ItemsUpdateItemResponse = (ItemPublic);

export type ItemsDeleteItemData = {
    id: string;
};

export type ItemsDeleteItemResponse = (Message);

export type ItemSubCategoryReadItemSubcategoriesData = {
    limit?: number;
    search?: string;
    skip?: number;
    sortBy?: string;
    sortOrder?: string;
};

export type ItemSubCategoryReadItemSubcategoriesResponse = (ItemSubCategoriesPublic);

export type ItemSubCategoryCreateItemSubcategoryData = {
    requestBody: ItemSubCategoryCreate;
};

export type ItemSubCategoryCreateItemSubcategoryResponse = (ItemSubCategoryPublic);

export type ItemSubCategoryReadItemSubcategoriesByCategoryData = {
    categoryId: string;
    limit?: number;
    skip?: number;
};

export type ItemSubCategoryReadItemSubcategoriesByCategoryResponse = (ItemSubCategoriesPublic);

export type ItemSubCategoryReadItemSubcategoryData = {
    id: string;
};

export type ItemSubCategoryReadItemSubcategoryResponse = (ItemSubCategoryWithCategory);

export type ItemSubCategoryUpdateItemSubcategoryData = {
    id: string;
    requestBody: ItemSubCategoryUpdate;
};

export type ItemSubCategoryUpdateItemSubcategoryResponse = (ItemSubCategoryPublic);

export type ItemSubCategoryDeleteItemSubcategoryData = {
    id: string;
};

export type ItemSubCategoryDeleteItemSubcategoryResponse = (Message);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserPublic);

export type RoleReadRolesData = {
    limit?: number;
    skip?: number;
};

export type RoleReadRolesResponse = (RolesPublic);

export type RoleCreateRoleData = {
    requestBody: RolesCreate;
};

export type RoleCreateRoleResponse = (RolesPublic);

export type RoleUpdateRoleData = {
    id: string;
    requestBody: RolesUpdate;
};

export type RoleUpdateRoleResponse = (RolesPublic);

export type RoleReadRoleData = {
    id: string;
};

export type RoleReadRoleResponse = (RolesPublic);

export type RoleDeleteRoleData = {
    id: string;
};

export type RoleDeleteRoleResponse = (Message);

export type RoleClaimsReadRoleClaimsData = {
    limit?: number;
    roleId?: string;
    skip?: number;
};

export type RoleClaimsReadRoleClaimsResponse = (Array<RolesClaimsPublic>);

export type RoleClaimsCreateRoleClaimData = {
    requestBody: RolesClaimsCreate;
};

export type RoleClaimsCreateRoleClaimResponse = (RolesClaimsPublic);

export type RoleClaimsReadRoleClaimData = {
    roleClaimId: string;
};

export type RoleClaimsReadRoleClaimResponse = (RolesClaimsPublic);

export type RoleClaimsUpdateRoleClaimData = {
    requestBody: RolesClaimsUpdate;
    roleClaimId: string;
};

export type RoleClaimsUpdateRoleClaimResponse = (RolesClaimsPublic);

export type RoleClaimsDeleteRoleClaimData = {
    /**
     * Permanently delete the claim instead of soft delete
     */
    permanent?: boolean;
    roleClaimId: string;
};

export type RoleClaimsDeleteRoleClaimResponse = (Message);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);