// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { ItemCategoryReadItemCategoriesData, ItemCategoryReadItemCategoriesResponse, ItemCategoryCreateItemCategoryData, ItemCategoryCreateItemCategoryResponse, ItemCategoryUpdateItemCatergoryData, ItemCategoryUpdateItemCatergoryResponse, ItemCategoryDeleteItemData, ItemCategoryDeleteItemResponse, ItemsReadItemsData, ItemsReadItemsResponse, ItemsCreateItemData, ItemsCreateItemResponse, ItemsReadItemData, ItemsReadItemResponse, ItemsUpdateItemData, ItemsUpdateItemResponse, ItemsDeleteItemData, ItemsDeleteItemResponse, ItemSubCategoryReadItemSubcategoriesData, ItemSubCategoryReadItemSubcategoriesResponse, ItemSubCategoryCreateItemSubcategoryData, ItemSubCategoryCreateItemSubcategoryResponse, ItemSubCategoryReadItemSubcategoriesByCategoryData, ItemSubCategoryReadItemSubcategoriesByCategoryResponse, ItemSubCategoryReadItemSubcategoryData, ItemSubCategoryReadItemSubcategoryResponse, ItemSubCategoryUpdateItemSubcategoryData, ItemSubCategoryUpdateItemSubcategoryResponse, ItemSubCategoryDeleteItemSubcategoryData, ItemSubCategoryDeleteItemSubcategoryResponse, LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginTestTokenResponse, LoginRecoverPasswordData, LoginRecoverPasswordResponse, LoginResetPasswordData, LoginResetPasswordResponse, LoginRecoverPasswordHtmlContentData, LoginRecoverPasswordHtmlContentResponse, PrivateCreateUserData, PrivateCreateUserResponse, RoleReadRolesData, RoleReadRolesResponse, RoleCreateRoleData, RoleCreateRoleResponse, RoleUpdateRoleData, RoleUpdateRoleResponse, RoleReadRoleData, RoleReadRoleResponse, RoleDeleteRoleData, RoleDeleteRoleResponse, RoleClaimsReadRoleClaimsData, RoleClaimsReadRoleClaimsResponse, RoleClaimsCreateRoleClaimData, RoleClaimsCreateRoleClaimResponse, RoleClaimsReadRoleClaimData, RoleClaimsReadRoleClaimResponse, RoleClaimsUpdateRoleClaimData, RoleClaimsUpdateRoleClaimResponse, RoleClaimsDeleteRoleClaimData, RoleClaimsDeleteRoleClaimResponse, UsersReadUsersData, UsersReadUsersResponse, UsersCreateUserData, UsersCreateUserResponse, UsersReadUserMeResponse, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse, UsersRegisterUserData, UsersRegisterUserResponse, UsersReadUserByIdData, UsersReadUserByIdResponse, UsersUpdateUserData, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserResponse, UtilsTestEmailData, UtilsTestEmailResponse, UtilsHealthCheckResponse } from './types.gen';

export class ItemCategoryService {
    /**
     * Read Item Categories
     * Retrieve items.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @param data.search
     * @param data.sortBy
     * @param data.sortOrder
     * @returns ItemCategoriesPublic Successful Response
     * @throws ApiError
     */
    public static readItemCategories(data: ItemCategoryReadItemCategoriesData = {}): CancelablePromise<ItemCategoryReadItemCategoriesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/itemsCategory/',
            query: {
                skip: data.skip,
                limit: data.limit,
                search: data.search,
                sortBy: data.sortBy,
                sortOrder: data.sortOrder
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Itemcategory
     * Create Item Category
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ItemCategoryPublic Successful Response
     * @throws ApiError
     */
    public static createItemCategory(data: ItemCategoryCreateItemCategoryData): CancelablePromise<ItemCategoryCreateItemCategoryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/itemsCategory/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Itemcatergory
     * Update Item Category
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ItemCategoryPublic Successful Response
     * @throws ApiError
     */
    public static updateItemCatergory(data: ItemCategoryUpdateItemCatergoryData): CancelablePromise<ItemCategoryUpdateItemCatergoryResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/itemsCategory/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Item
     * Delete Item Category
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteItem(data: ItemCategoryDeleteItemData): CancelablePromise<ItemCategoryDeleteItemResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/itemsCategory/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class ItemsService {
    /**
     * Read Items
     * Retrieve items.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns ItemsPublic Successful Response
     * @throws ApiError
     */
    public static readItems(data: ItemsReadItemsData = {}): CancelablePromise<ItemsReadItemsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Item
     * Create new item.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static createItem(data: ItemsCreateItemData): CancelablePromise<ItemsCreateItemResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/items/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Item
     * Get item by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static readItem(data: ItemsReadItemData): CancelablePromise<ItemsReadItemResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Item
     * Update an item.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static updateItem(data: ItemsUpdateItemData): CancelablePromise<ItemsUpdateItemResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Item
     * Delete an item.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteItem(data: ItemsDeleteItemData): CancelablePromise<ItemsDeleteItemResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class ItemSubCategoryService {
    /**
     * Read Item Subcategories
     * Retrieve item subcategories.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @param data.search
     * @param data.sortBy
     * @param data.sortOrder
     * @returns ItemSubCategoriesPublic Successful Response
     * @throws ApiError
     */
    public static readItemSubcategories(data: ItemSubCategoryReadItemSubcategoriesData = {}): CancelablePromise<ItemSubCategoryReadItemSubcategoriesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/itemsSubCategory/',
            query: {
                skip: data.skip,
                limit: data.limit,
                search: data.search,
                sortBy: data.sortBy,
                sortOrder: data.sortOrder
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Item Subcategory
     * Create a new item subcategory.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ItemSubCategoryPublic Successful Response
     * @throws ApiError
     */
    public static createItemSubcategory(data: ItemSubCategoryCreateItemSubcategoryData): CancelablePromise<ItemSubCategoryCreateItemSubcategoryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/itemsSubCategory/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Item Subcategories By Category
     * Retrieve item subcategories by category ID.
     * @param data The data for the request.
     * @param data.categoryId
     * @param data.skip
     * @param data.limit
     * @returns ItemSubCategoriesPublic Successful Response
     * @throws ApiError
     */
    public static readItemSubcategoriesByCategory(data: ItemSubCategoryReadItemSubcategoriesByCategoryData): CancelablePromise<ItemSubCategoryReadItemSubcategoriesByCategoryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/itemsSubCategory/category/{category_id}',
            path: {
                category_id: data.categoryId
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Item Subcategory
     * Get a specific item subcategory by ID with its parent category.
     * @param data The data for the request.
     * @param data.id
     * @returns ItemSubCategoryWithCategory Successful Response
     * @throws ApiError
     */
    public static readItemSubcategory(data: ItemSubCategoryReadItemSubcategoryData): CancelablePromise<ItemSubCategoryReadItemSubcategoryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/itemsSubCategory/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Item Subcategory
     * Update an item subcategory.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ItemSubCategoryPublic Successful Response
     * @throws ApiError
     */
    public static updateItemSubcategory(data: ItemSubCategoryUpdateItemSubcategoryData): CancelablePromise<ItemSubCategoryUpdateItemSubcategoryResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/itemsSubCategory/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Item Subcategory
     * Soft delete an item subcategory.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteItemSubcategory(data: ItemSubCategoryDeleteItemSubcategoryData): CancelablePromise<ItemSubCategoryDeleteItemSubcategoryResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/itemsSubCategory/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static testToken(): CancelablePromise<LoginTestTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/test-token'
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static recoverPassword(data: LoginRecoverPasswordData): CancelablePromise<LoginRecoverPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset Password
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resetPassword(data: LoginResetPasswordData): CancelablePromise<LoginResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/reset-password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns string Successful Response
     * @throws ApiError
     */
    public static recoverPasswordHtmlContent(data: LoginRecoverPasswordHtmlContentData): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery-html-content/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class PrivateService {
    /**
     * Create User
     * Create a new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: PrivateCreateUserData): CancelablePromise<PrivateCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/private/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class RoleService {
    /**
     * Read Roles
     * Retrieve roles.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns RolesPublic Successful Response
     * @throws ApiError
     */
    public static readRoles(data: RoleReadRolesData = {}): CancelablePromise<RoleReadRolesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/roles/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Role
     * Create a new role.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns RolesPublic Successful Response
     * @throws ApiError
     */
    public static createRole(data: RoleCreateRoleData): CancelablePromise<RoleCreateRoleResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/roles/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Role
     * Update a role.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns RolesPublic Successful Response
     * @throws ApiError
     */
    public static updateRole(data: RoleUpdateRoleData): CancelablePromise<RoleUpdateRoleResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/roles/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Role
     * Get role by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns RolesPublic Successful Response
     * @throws ApiError
     */
    public static readRole(data: RoleReadRoleData): CancelablePromise<RoleReadRoleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/roles/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Role
     * Delete a role (soft delete by setting isactive to False).
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteRole(data: RoleDeleteRoleData): CancelablePromise<RoleDeleteRoleResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/roles/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class RoleClaimsService {
    /**
     * Read Role Claims
     * Retrieve role claims with optional filtering by role_id.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @param data.roleId
     * @returns RolesClaimsPublic Successful Response
     * @throws ApiError
     */
    public static readRoleClaims(data: RoleClaimsReadRoleClaimsData = {}): CancelablePromise<RoleClaimsReadRoleClaimsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/role-claims/',
            query: {
                skip: data.skip,
                limit: data.limit,
                role_id: data.roleId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Role Claim
     * Create a new role claim.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns RolesClaimsPublic Successful Response
     * @throws ApiError
     */
    public static createRoleClaim(data: RoleClaimsCreateRoleClaimData): CancelablePromise<RoleClaimsCreateRoleClaimResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/role-claims/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Role Claim
     * Get a specific role claim by ID.
     * @param data The data for the request.
     * @param data.roleClaimId
     * @returns RolesClaimsPublic Successful Response
     * @throws ApiError
     */
    public static readRoleClaim(data: RoleClaimsReadRoleClaimData): CancelablePromise<RoleClaimsReadRoleClaimResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/role-claims/{role_claim_id}',
            path: {
                role_claim_id: data.roleClaimId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Role Claim
     * Update a role claim.
     * @param data The data for the request.
     * @param data.roleClaimId
     * @param data.requestBody
     * @returns RolesClaimsPublic Successful Response
     * @throws ApiError
     */
    public static updateRoleClaim(data: RoleClaimsUpdateRoleClaimData): CancelablePromise<RoleClaimsUpdateRoleClaimResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/role-claims/{role_claim_id}',
            path: {
                role_claim_id: data.roleClaimId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Role Claim
     * Delete a role claim.
     * By default, this is a soft delete (sets isactive to False).
     * Set permanent=true to permanently delete the record.
     * @param data The data for the request.
     * @param data.roleClaimId
     * @param data.permanent Permanently delete the claim instead of soft delete
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteRoleClaim(data: RoleClaimsDeleteRoleClaimData): CancelablePromise<RoleClaimsDeleteRoleClaimResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/role-claims/{role_claim_id}',
            path: {
                role_claim_id: data.roleClaimId
            },
            query: {
                permanent: data.permanent
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static readUsers(data: UsersReadUsersData = {}): CancelablePromise<UsersReadUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * Create new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: UsersCreateUserData): CancelablePromise<UsersCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserMe(data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updatePasswordMe(data: UsersUpdatePasswordMeData): CancelablePromise<UsersUpdatePasswordMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Register User
     * Create new user without the need to be logged in.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static registerUser(data: UsersRegisterUserData): CancelablePromise<UsersRegisterUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserById(data: UsersReadUserByIdData): CancelablePromise<UsersReadUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUser(data: UsersUpdateUserData): CancelablePromise<UsersUpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUser(data: UsersDeleteUserData): CancelablePromise<UsersDeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UtilsService {
    /**
     * Test Email
     * Test emails.
     * @param data The data for the request.
     * @param data.emailTo
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static testEmail(data: UtilsTestEmailData): CancelablePromise<UtilsTestEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/test-email/',
            query: {
                email_to: data.emailTo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
    
}